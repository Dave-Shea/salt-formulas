`Home <index.html>`_ SaltStack-Formulas Development Documentation

Salt Formula testing
====================

Each formula contains *Makefile* with at least *test* target.
Under ``tests`` directory are located resources for test execution.

Test target executes "smoke test" implemented by ``tests/run_tests.sh`` capable to fetch dependencies in python virtual
environment by executing `salt-call state.show_sls` with provided ``tests/pillar`` data.

The purpose of the smoke test is to find syntax, typo issues and verify example pillar data against the formula.

Example content of ``tests`` folder contains test pillars and a run_tests.sh as generated by 
`cookiecutter <https://github.com/salt-formulas/salt-formulas/tree/master/cookiecutter/salt-formula>_`.

.. code-block::

  tests
  ├── pillar
  │   └── client_single.sls
  │   └── server_single.sls
  └── run_tests.sh

Create or update pillars in ``tests/pillar/\*.sls`` with test data.


Formula testing with Test Kitchen
---------------------------------

`Test Kitchen <http://kitchen.ci>`_ with `kitchen-salt <https://github.com/simonmcc/kitchen-salt>`_ provisioner
plugin may be used for local development as well as CI scenario.

Test Kitchen is a test harness tool to execute your configured code on one or more platforms in isolation.
There is a ``.kitchen.yml`` in main directory that defines *platforms* to be tested and *suites* to execute on them.

Kitchen CI can spin instances locally or remote, based on used *driver*.
For example ``.kitchen.yml`` may define a
`docker  <https://github.com/test-kitchen/kitchen-docker>`_ or
`vagrant <https://github.com/test-kitchen/kitchen-vagrant>`_ driver.

For more, explore it's rich
`ecosystem <https://github.com/test-kitchen/test-kitchen/blob/master/ECOSYSTEM.md>`_ of supported drivers/provisioners/verifiers/...

Usage:
^^^^^^

A listing of scenarios to be executed:

.. code-block:: shell

  $ kitchen list

  Instance                    Driver   Provisioner  Verifier  Transport  Last Action

  client-single-ubuntu-1404   Docker   SaltSolo     Inspec    Ssh        <Not Created>
  client-single-ubuntu-1604   Docker   SaltSolo     Inspec    Ssh        <Not Created>
  client-single-centos-71     Docker   SaltSolo     Inspec    Ssh        <Not Created>

The `Busser <https://github.com/test-kitchen/busser>`_ *Verifier* is used to setup and run tests
implementated in `<repo>/test/integration`. It installs the particular driver to tested instance
(`Serverspec <https://github.com/neillturner/kitchen-verifier-serverspec>`_,
`InSpec <https://github.com/chef/kitchen-inspec>`_, Shell, Bats, ...) prior the verification is executed.


Example workflow:

.. code-block:: shell

 # list instances and status
 kitchen list

 # manually execute integration tests
 kitchen [test || [create|converge|verify|exec|login|destroy|...]] [instance] -t tests/integration

 # use with provided Makefile (ie: within CI pipeline)
 make kitchen



How it works
^^^^^^^^^^^^

Kitchen spin an instances in Docker, Vagrant, OpenStack environment, etc. based on configured driver.
Instance is configured as salt minion, where the configuration is defined by ``.kitchen.yml`` and ``tests/pillar/*.sls``

Override your specific needs with ``.kitchen.<backend|local>.yml`` that you may load as:
``KITCHEN_LOCAL_YAML=.kitchen.<driver>.yml kitchen <action> <suite>``.

Example: ``KITCHEN_LOCAL_YAML=.kitchen.local kitchen verify server-ubuntu-1404 -t tests/integration``.

Test Kitchen then allows you execute several action to perform your testing under configured conditions:

1. *create*, provision an test instance (VM, container)
2. *converge*, run a provisioner (shell script, kitchen-salt)
3. *verify*, run a verification (inspec, other may be added)
4. *destroy*


Verifying deployment
^^^^^^^^^^^^^^^^^^^^

There is couple of verifier plugins that are shipped with Test Kitchen. They allow to run simple bash scripts and checking
it's exit codes to run specific purpose based frameworks.

The `Busser <https://github.com/test-kitchen/busser>`_ *Verifier* goes with test-kitchen by default.
It is used to setup and run tests implemented in ``<repo>/test/integration``. It guess and installs the particular driver to tested instance.
By default `InSpec <https://github.com/chef/kitchen-inspec>`_ is expected.

You may avoid to install busser framework if you configure specific verifier in ``.kitchen.yml`` and install it kitchen plugin locally:

	verifier:
		name: inspec

If you would to write another verification scripts than InSpec store them in ``<repo>/tests/integration/<suite>/<busser>/*``.
``Busser <https://github.com/test-kitchen/busser>`` is a test setup and execution framework under test kitchen.


Implement integration tests under ``<repo>/tests/integration/<suite>/<busser>/*`` directory with ``_spec.rb`` filename
suffix.

**InSpec**

InSpec is native validation framework for Test Kitchen and as such don't require usage of ``<busser>`` folder. Thus the tests may by
stored directly under ``<repo>/tests/integration/<suite>/*``

Additional resources.

* https://github.com/chef/inspec
* https://github.com/chef/kitchen-inspec


Example verification scripts under `tests/integration` folder of the formula:

.. code-block::

  tests
  ├── integration
  │   ├── default
  │   │   └── default_testcase_spec.rb  # Written in InSpec
  │   ├── backupmx
  │   │   └── serverspec                # <Verifier framework>
  │   │       └── backupmx_spec.rb      # Written in ServerSpec
  │   ├── helpers
  │   │   └── serverspec
  │   │       └── spec_helper.rb
  │   ├── relay
  │   │   └── serverspec
  │   │       └── relay_spec.rb
  │   └── server
  │       └── serverspec
  │           ├── aliases_spec.rb
  │           └── server_spec.rb
  ├── pillar
  │   ├── backupmx.sls
  │   ├── relay.sls
  │   └── server.sls
  └── run_tests.sh


Requirements
^^^^^^^^^^^^

Use latest stable kitchen-salt and kitchen-test.
Minimal supported version of kitchen-salt is >= v0.0.25.

**TL;DR**

First you have to install ruby package manager `gem <https://rubygems.org/>`_.

Install required gems:

.. code-block:: shell

  # Ruby side:
  gem install <gem name from the list below>

  # Isolated w/Bundler
  gem install bundler

  cat > Gemfile <-EOF
		source 'https://rubygems.org'
		
		gem 'test-kitchen'
		gem 'kitchen-docker'
		gem 'kitchen-inspec'
		gem 'kitchen-sync'
		gem 'inspec'
		gem 'kitchen-salt', '>=0.0.25'
	EOF

  bundle install [--path $PWD/.vendor/bundle]

  # use with:
  # bundle exec kitchen list

See http://kitchen.ci/ for more details.

**Install procedure**

One may be satisfied installing ruby and gems system-wide right from OS package manager.
For advanced users or the sake of complex environments you may use `rbenv <https://github.com/rbenv/rbenv>`_ for user side ruby installation.

 * https://github.com/rbenv/rbenv
 * http://kitchen.ci/docs/getting-started/installing

An example steps to install user side ruby and prerequisites:

.. code-block:: shell

  # Use package manager to install rbenv and ruby-build
  sudo apt-get install rbenv ruby-build

  # list all available versions:
  rbenv install -l

  # install a Ruby version of your choice or pick latest
  rbenv install $(rbenv install -l|grep -E '^[ ]*[0-9]\.[0-9]+'|tail -1)

  # activate
  rbenv local 2.4.0

  # it's usually a good idea to update rubygems first
  rbenv exec gem update --system

  # install test kitchen
  rbenv exec gem install bundler
  rbenv exec gem install test-kitchen

Continue with the optional ``Gemfile`` in the formula main directory to fetch fine tuned dependencies.
If you use Gemfile and Bundler for local dependencies prepend all command with
``rbenv exec bundler exec`` and possibly set an alias in your ~/.bashrc, etc.

.. code-block:: shell

  cat >> ~/.${SHELL}rc <<-EOF
		alias kitchen="rbenv exec bundler exec kitchen"
  EOF

With such alias set, you should be able to execute ``rbenv exec bundler exec
make kitchen`` and see test results.

